{"version":3,"sources":["APOD.js","App.js","serviceWorker.js","index.js"],"names":["APOD","state","data","Axios","get","then","resp","setState","date","title","explanation","hdurl","this","className","style","textAlign","paddingTop","display","justifyContent","padding","src","lineHeight","fontStyle","paddingLeft","paddingBottom","borderBottom","letterSpacing","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4RAuIeA,E,kDAlId,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,KAAM,MAHM,E,gEAMO,IAAD,OACnBC,IAAMC,IACL,wFACCC,MAAK,SAACC,GACP,EAAKC,SAAS,CACbL,KAAMI,EAAKJ,Y,+BAKb,IAAIM,EAAO,KACVC,EAAQ,KACRC,EAAc,KACdC,EAAQ,KAOT,OANIC,KAAKX,MAAMC,OACdM,EAAOI,KAAKX,MAAMC,KAAKM,KACvBG,EAAQC,KAAKX,MAAMC,KAAKS,MACxBD,EAAcE,KAAKX,MAAMC,KAAKQ,YAC9BD,EAAQG,KAAKX,MAAMC,KAAKO,OAGxB,yBAAKI,UAAU,QACbD,KAAKX,MAAMC,KACX,yBAAKW,UAAU,UACd,wBAAIC,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAA9C,gCAGA,yBACCF,MAAO,CACNG,QAAS,OACTC,eAAgB,gBAChBC,QAAS,aAGV,4BAAKV,GACL,4BAAKD,IAEN,yBAAKY,IAAKT,IACV,wBAAIG,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAA9C,eAGA,wBACCF,MAAO,CACNK,QAAS,WACTE,WAAY,QAGZX,GAEF,wBACCI,MAAO,CACNQ,UAAW,SACXN,WAAY,OACZO,YAAa,SAJf,qBAWD,wBACCV,UAAU,SACVC,MAAO,CAAEC,UAAW,SAAUC,WAAY,QAF3C,cAOAJ,KAAKX,MAAMC,KACX,yBAAKW,UAAU,UACd,wBACCC,MAAO,CACNC,UAAW,SACXC,WAAY,MACZQ,cAAe,MACfC,aAAc,oBALhB,gCAUA,yBACCX,MAAO,CACNK,QAAS,cAGV,4BAAKV,GACL,4BAAKD,IAEN,yBAAKY,IAAKT,IACV,wBAAIG,MAAO,CAAEC,UAAW,SAAUC,WAAY,SAA9C,eAGA,wBACCF,MAAO,CACNK,QAAS,WACTO,cAAe,QACfL,WAAY,QAGZX,GAGF,wBACCI,MAAO,CACNQ,UAAW,SACXN,WAAY,OACZO,YAAa,SAJf,qBAWD,wBACCV,UAAU,SACVC,MAAO,CAAEC,UAAW,SAAUC,WAAY,QAF3C,mB,GAvHcW,aCSJC,EARH,WACX,OACC,yBAAKf,UAAU,OACd,kBAAC,EAAD,QCIiBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c1bff0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Axios from 'axios';\r\n\r\nclass APOD extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tAxios.get(\r\n\t\t\t'https://api.nasa.gov/planetary/apod?api_key=ogNWck1c8oyFlVWt29GjCPxznxvW6PuE7GER1Kxf'\r\n\t\t).then((resp) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdata: resp.data,\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\tvar date = null,\r\n\t\t\ttitle = null,\r\n\t\t\texplanation = null,\r\n\t\t\thdurl = null;\r\n\t\tif (this.state.data) {\r\n\t\t\tdate = this.state.data.date;\r\n\t\t\thdurl = this.state.data.hdurl;\r\n\t\t\texplanation = this.state.data.explanation;\r\n\t\t\ttitle = this.state.data.title;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className='apod'>\r\n\t\t\t\t{this.state.data ? (\r\n\t\t\t\t\t<div className='apod_d'>\r\n\t\t\t\t\t\t<h1 style={{ textAlign: 'center', paddingTop: '10px' }}>\r\n\t\t\t\t\t\t\tASTRONOMY PICTURE OF THE DAY\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\t\t\t\t\tpadding: '0px 20px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t\t\t<h2>{date}</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<img src={hdurl} />\r\n\t\t\t\t\t\t<h2 style={{ textAlign: 'center', paddingTop: '25px' }}>\r\n\t\t\t\t\t\t\tExplanation\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<h3\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: '5px 20px',\r\n\t\t\t\t\t\t\t\tlineHeight: '1.6',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{explanation}\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t<h3\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tfontStyle: 'italic',\r\n\t\t\t\t\t\t\t\tpaddingTop: '10px',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '20px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSOURCE- NASA-API\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h1\r\n\t\t\t\t\t\tclassName='apod_d'\r\n\t\t\t\t\t\tstyle={{ textAlign: 'center', paddingTop: '25%' }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t)}\r\n\t\t\t\t{this.state.data ? (\r\n\t\t\t\t\t<div className='apod_m'>\r\n\t\t\t\t\t\t<h1\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\t\t\tpaddingTop: '8px',\r\n\t\t\t\t\t\t\t\tpaddingBottom: '8px',\r\n\t\t\t\t\t\t\t\tborderBottom: '1px solid white',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tASTRONOMY PICTURE OF THE DAY\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: '10px 10px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t\t\t<h2>{date}</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<img src={hdurl} />\r\n\t\t\t\t\t\t<h2 style={{ textAlign: 'center', paddingTop: '12px' }}>\r\n\t\t\t\t\t\t\tExplanation\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<h3\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tpadding: '3px 10px',\r\n\t\t\t\t\t\t\t\tletterSpacing: '1.1px',\r\n\t\t\t\t\t\t\t\tlineHeight: '1.3',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{explanation}\r\n\t\t\t\t\t\t</h3>\r\n\r\n\t\t\t\t\t\t<h3\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tfontStyle: 'italic',\r\n\t\t\t\t\t\t\t\tpaddingTop: '10px',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '10px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSOURCE- NASA-API\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h1\r\n\t\t\t\t\t\tclassName='apod_m'\r\n\t\t\t\t\t\tstyle={{ textAlign: 'center', paddingTop: '25%' }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default APOD;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col } from 'react-bootstrap';\nimport APOD from './APOD';\nconst App = () => {\n\treturn (\n\t\t<div className='app'>\n\t\t\t<APOD />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}